"""
output_csv_files.py 

This script outputs csv data for running relocalization with Matlab or C++ code.

Output:
- A seperate file for each image: intrinsic, 2D line parameters, gt poses, retrived map line idx, retrived pose
- A csv file for map line info 
"""

import numpy as np
import pandas as pd
import os

### load numpy file generated by line_map_extractor
project_dir = "/data1/home/lucky/IROS25/SCORE"
scene_id_list = ["a1d9da703c","689fec23d7","c173f62b15","69e5939669"]
scene_name_list = ["S1","S2","S3","S4"]
pred_flag = True   # True: use predicted semantic labels for the query imagese, False: use ground truth semantic labels
for i in range(0,len(scene_id_list)):
    scene_id = scene_id_list[i]
    scene_name = scene_name_list[i]
    data_path_map = project_dir+f"/line_map_extractor/out/"+scene_id+"/map/"+scene_id+f"_results_merged.npy"
    data_map = np.load(data_path_map, allow_pickle=True).item()
    if pred_flag:
        data_path_query = project_dir+f"/line_map_extractor/out/"+scene_id+"/query/"+scene_id+f"_query_data_pred.npy"
    else:
        data_path_query = project_dir+f"/line_map_extractor/out/"+scene_id+"/query/"+scene_id+f"_query_data.npy"
    data_query = np.load(data_path_query, allow_pickle=True).item()
    #
    merged_semantic_ids_3D = data_map['merged_semantic_ids_3D']
    merged_end_points_3D= data_map['merged_end_points_3D']
    #
    poses_all = data_query['scene_pose']
    intrinsics_all = data_query['scene_intrinsic']
    scene_line_2D_params = data_query['scene_line_2D_params']
    scene_line_2D_semantic_ids = data_query['scene_line_2D_semantic_ids']
    scene_line_2D_match_idx = data_query['scene_line_2D_match_idx']
    retrived_3D_line_idx = data_query['scene_retrived_3D_line_idx']
    retrived_poses = data_query['scene_retrived_poses']
    line_2D_points = data_query['scene_line_2D_end_points']
    scene_proj_error_r = data_query['scene_proj_error_r']
    scene_proj_error_t = data_query['scene_proj_error_t']
    #
    ### save path
    if pred_flag:
        base_path = project_dir+f"/csv_dataset/"+scene_name+"_pred/"
    else:
        base_path = project_dir+f"/csv_dataset/"+scene_name+"/"
    pose_folder = base_path+"poses/"
    retrived_pose_folder = base_path+"retrived_closest_pose/"
    intrinsic_folder = base_path+"intrinsics/"
    line2D_folder = base_path+"lines2D/"
    retrived_3D_line_idx_folder = base_path+"retrived_3D_line_idx/"

    for folder in [pose_folder,intrinsic_folder,line2D_folder,retrived_3D_line_idx_folder,retrived_pose_folder]:
        if not os.path.exists(folder):
            os.makedirs(folder)

    ### process images one bye one
    while(len(scene_line_2D_semantic_ids)>0):
        frame_name,frame_semantics_id = scene_line_2D_semantic_ids.popitem()
        # store the retrived 3D line idx for the cur image
        retrived_data = retrived_3D_line_idx[frame_name]
        df_retrived_3D_line_idx = pd.DataFrame(retrived_data, columns=['retrived_3D_line_idx'])
        df_retrived_3D_line_idx.to_csv(retrived_3D_line_idx_folder+frame_name+'.csv', index=False)
        num_lines = len(frame_semantics_id)
        # store the retrived pose of the most similar image
        retrived_pose = retrived_poses[frame_name][1]
        df_retrived_pose = pd.DataFrame(retrived_pose, columns=['c1','c2','c3','c4'])
        df_retrived_pose.to_csv(retrived_pose_folder+frame_name+'_retrived_pose.csv', index=False)
        # store the pose and camera intrinsic for the cur image
        pose_this_frame = poses_all[frame_name] 
        intrinsic_vec = np.empty([1,4],dtype=float)  # fx cx fy cy
        intrinsic_vec[0][0] = intrinsics_all[frame_name][0][0]
        intrinsic_vec[0][1] = intrinsics_all[frame_name][0][2]
        intrinsic_vec[0][2] = intrinsics_all[frame_name][1][1]
        intrinsic_vec[0][3] = intrinsics_all[frame_name][1][2]   
        df_pose = pd.DataFrame(pose_this_frame, columns=['c1','c2','c3','c4'])
        df_pose.to_csv(pose_folder+frame_name+'.csv', index=False) 
        df_intrinsic = pd.DataFrame(intrinsic_vec, columns=['fx','cx','fy','cy'])
        df_intrinsic.to_csv(intrinsic_folder+frame_name+'.csv', index=False)  
        proj_error_r = scene_proj_error_r[frame_name]
        proj_error_t = scene_proj_error_t[frame_name]
        lines_2D_thisframe = np.empty([num_lines,11],dtype=float) # used to store 2D line paramaters
        
        for j in range(0,num_lines):
            # normal(3x1), semantic (1), endpoint a(2x1), endpoint b(2x1), matched 3D line idx(1), proj_err(2)
            lines_2D_thisframe[j][0:3] = scene_line_2D_params[frame_name][j]
            lines_2D_thisframe[j][3] = frame_semantics_id[j]
            lines_2D_thisframe[j][4:6] = line_2D_points[frame_name][j][0]
            lines_2D_thisframe[j][6:8] = line_2D_points[frame_name][j][1]
            lines_2D_thisframe[j][8] = scene_line_2D_match_idx[frame_name][j]
            lines_2D_thisframe[j][9] = proj_error_r[j]
            lines_2D_thisframe[j][10] = proj_error_t[j]
        df_2D = pd.DataFrame(lines_2D_thisframe, columns=['A','B','C','semantic_id','ua','va','ub','vb','matched_3D_line_idx','err_r','err_t'])
        df_2D.to_csv(line2D_folder+frame_name+'_2Dlines.csv', index=False)
        print(frame_name+'data processed')

    ### process all 3D lines in the scene
    num_3D_line = len(merged_semantic_ids_3D)
    # 3D line params: endpoint a(3x1), endpoint b(3x1), semantic label(1)
    lines_3D_all = np.empty([num_3D_line,7],dtype=float) 
    for i  in range(0,num_3D_line):
        lines_3D_all[i][0:3] = merged_end_points_3D[i][0]
        lines_3D_all[i][3:6] = merged_end_points_3D[i][1]
        lines_3D_all[i][6] = merged_semantic_ids_3D[i]
    df_3D = pd.DataFrame(lines_3D_all, columns=['xa','ya','za','xb','yb','zb','semantic_id'])
    df_3D.to_csv(base_path+'3Dlines.csv', index=False)





